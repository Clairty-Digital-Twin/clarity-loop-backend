CLARITY Digital Twin Test Suite Enhancement PRD

Project: Comprehensive Test Suite to Achieve 85% Code Coverage

Overview:
The CLARITY backend currently has 57% test coverage with 807/810 tests passing. We need to enhance the test suite to reach 85% coverage while maintaining code quality and fixing critical issues identified by code review.

Current State:
- 57% overall test coverage
- Services with lowest coverage:
  - dynamodb_service.py: 13% coverage
  - cognito_auth_service.py: 18% coverage  
  - s3_storage_service.py: 19% coverage
  - sqs_messaging_service.py: 20% coverage
  - aws_messaging_service.py: 24% coverage
  - health_data_service.py: 24% coverage
- Critical issues identified:
  - Blocking I/O in async services
  - Data corruption in S3 sanitization
  - Insecure authentication flow
  - Missing integration tests

Goals:
1. Achieve 85% test coverage across all services
2. Fix critical blocking I/O issues in async services
3. Fix data corruption issue in S3 storage service
4. Implement comprehensive integration tests using LocalStack
5. Create end-to-end test suite for critical user flows
6. Ensure all tests pass and code remains shippable

Technical Requirements:
- Use pytest for all tests
- Mock AWS services using moto/LocalStack for integration tests
- Follow existing test patterns and conventions
- Maintain test isolation and independence
- Add performance tests for critical paths
- Include security tests for authentication flows

Specific Tasks:
1. Unit Tests Enhancement
   - Add comprehensive unit tests for DynamoDB service (13% to 85%)
   - Add comprehensive unit tests for Cognito auth service (18% to 85%)
   - Add comprehensive unit tests for S3 storage service (19% to 85%)
   - Add comprehensive unit tests for SQS messaging service (20% to 85%)
   - Add comprehensive unit tests for AWS messaging service (24% to 85%)
   - Add comprehensive unit tests for health data service (24% to 85%)

2. Fix Critical Issues
   - Fix blocking I/O calls in cognito_auth_service.py using run_in_executor
   - Fix blocking I/O calls in aws_messaging_service.py using run_in_executor
   - Fix data corruption in s3_storage_service.py sanitization
   - Fix insecure ADMIN_NO_SRP_AUTH flow in Cognito

3. Integration Tests
   - Set up LocalStack configuration for AWS services
   - Create integration tests for authentication flow (Cognito)
   - Create integration tests for data pipeline (S3 -> SQS -> DynamoDB)
   - Create integration tests for Gemini AI service
   - Test WebSocket connections and real-time updates

4. End-to-End Tests
   - Implement golden path user journey test
   - Test user registration and login flow
   - Test health data upload and processing
   - Test AI insight generation
   - Test error scenarios and edge cases

5. Code Quality
   - Run make lint and fix all issues
   - Run make typecheck and fix all type errors
   - Run make format to ensure consistent formatting
   - Update documentation as needed

Success Criteria:
- 85% or higher test coverage
- All tests passing (100% pass rate)
- No blocking I/O in async code
- No data corruption issues
- Secure authentication implementation
- Complete integration test suite
- Documented E2E test scenarios
- Code remains deployable to AWS ECS