name: 🚀 Clarity Loop CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"
  AWS_REGION: us-east-1
  ECR_REPOSITORY: clarity-backend

jobs:
  # 🔍 Code Quality & Linting
  lint:
    name: 🔍 Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📋 Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -e .[dev]

      - name: 🔧 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Install Node.js dependencies
        run: npm ci

      - name: 🔍 Run Ruff linting
        run: ruff check . --output-format=github

      - name: 🎨 Check Black formatting
        run: black --check .

      - name: 📝 Check import sorting
        run: ruff check . --select I --diff

      - name: 🔒 Run security checks (Bandit)
        run: bandit -r clarity/ -f json -o bandit-report.json || true

      - name: 🛡️ Check for vulnerabilities (Safety)
        run: safety check --json --output safety-report.json || true

      - name: 📚 Lint documentation
        run: npm run lint:md

      - name: 🏥 Check link health
        run: npm run check:links || true

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # 🧪 Testing Suite
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📋 Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e .[test]

      - name: 🧪 Run unit tests
        env:
          TESTING: 1
          REDIS_URL: redis://localhost:6379
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          DYNAMODB_ENDPOINT_URL: http://localhost:8000
          COGNITO_USER_POOL_ID: test-pool
          COGNITO_CLIENT_ID: test-client
          SKIP_EXTERNAL_SERVICES: true
        run: |
          pytest tests/unit/ -v --cov=clarity --cov-report=xml --cov-report=html

      - name: 🔗 Run integration tests
        env:
          TESTING: 1
          REDIS_URL: redis://localhost:6379
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          DYNAMODB_ENDPOINT_URL: http://localhost:8000
          COGNITO_USER_POOL_ID: test-pool
          COGNITO_CLIENT_ID: test-client
          SKIP_EXTERNAL_SERVICES: true
        run: |
          pytest tests/integration/ -v --maxfail=5

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # 📄 OpenAPI Validation
  openapi:
    name: 📄 OpenAPI Validation
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 🔧 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e .[dev]
          npm ci

      - name: 📝 Generate OpenAPI spec
        env:
          SKIP_AWS_INIT: true
          ENABLE_AUTH: false
        run: python3 scripts/generate_openapi.py

      - name: 🎯 Validate with Spectral
        run: npx @stoplight/spectral-cli lint openapi.json --ruleset .spectral.yml

      - name: 🔴 Validate with Redocly
        run: npx @redocly/cli lint openapi.json

      - name: 📋 Validate schema structure
        run: npx @apidevtools/swagger-cli validate openapi.json

      - name: 📤 Upload OpenAPI spec
        uses: actions/upload-artifact@v3
        with:
          name: openapi-spec
          path: openapi.json

  # 🔍 Type Checking
  type-check:
    name: 🔍 Type Check
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📋 Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e .[dev]

      - name: 🔍 Run MyPy type checking
        run: mypy clarity/ --strict

  # 🤖 ML Model Tests
  ml-tests:
    name: 🤖 ML Model Tests
    runs-on: ubuntu-latest
    needs: lint
    if: contains(github.event.head_commit.message, '[ml]') || github.event_name == 'workflow_dispatch'
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📋 Install ML dependencies
        run: |
          pip install --upgrade pip
          pip install -e .[dev]
          pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu

      - name: 🧠 Test PAT model components
        run: pytest tests/ml/ -v -m "pat"

      - name: 🔮 Test Gemini integration
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: pytest tests/ml/ -v -m "gemini"

  # 🏗️ Build & Security Scan
  build:
    name: 🏗️ Build & Security Scan
    runs-on: ubuntu-latest
    needs: [test, type-check, openapi]
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.aws
          push: false
          tags: ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🛡️ Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 📚 Documentation Build
  docs:
    name: 📚 Build Documentation
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📋 Install documentation dependencies
        run: |
          pip install --upgrade pip
          pip install -e .[docs]

      - name: 📚 Build documentation
        run: mkdocs build --strict

      - name: 📤 Upload documentation artifacts
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: site/

  # 🚀 Deploy to AWS ECS (Production)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docs]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      id-token: write
      contents: read
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/GitHubActionsDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔑 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🏗️ Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -f Dockerfile.aws -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: 📝 Update ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-definition.json
          container-name: clarity-backend
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: 🚀 Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: clarity-backend-service
          cluster: ***REMOVED***
          wait-for-service-stability: true

      - name: 📤 Deploy documentation
        if: success()
        run: mkdocs gh-deploy --force