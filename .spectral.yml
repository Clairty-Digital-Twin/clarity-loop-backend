extends: ["spectral:oas", "spectral:asyncapi"]

rules:
  # Disable overly strict rules
  openapi-tags: off  # We dynamically generate tags
  operation-tag-defined: off  # Tags are defined in FastAPI
  
  # Custom rules for CLARITY API
  clarity-path-kebab-case:
    description: Paths should use kebab-case
    message: "{{property}} should use kebab-case (e.g., health-data not healthData)"
    severity: error
    given: $.paths[*]~
    then:
      function: pattern
      functionOptions:
        match: "^(/[a-z0-9]+(-[a-z0-9]+)*)*(/\\{[^}]+\\})?(/[a-z0-9]+(-[a-z0-9]+)*)*$"
  
  clarity-no-trailing-slash:
    description: Paths should not have trailing slashes (except root)
    message: "{{property}} should not have a trailing slash"
    severity: error
    given: $.paths[*]~
    then:
      function: pattern
      functionOptions:
        notMatch: ".+/$"
  
  clarity-operation-security:
    description: All operations except auth and health should have security
    message: "{{property}} should define security requirements"
    severity: error
    given: $.paths[?(!@property.match(/^\/(health|metrics|docs|redoc|openapi.json)/) && !@property.match(/auth/))].*.security
    then:
      function: defined
  
  clarity-response-examples:
    description: 2xx responses should have examples
    message: "{{property}} should have an example"
    severity: warn
    given: $.paths.*.*.responses.2*.content.application/json
    then:
      - field: example
        function: defined
      - field: examples
        function: defined
  
  clarity-error-responses:
    description: Operations should define error responses
    message: "{{property}} should have 401, 403, and 500 responses"
    severity: warn
    given: $.paths[?(!@property.match(/^\/(health|metrics|docs|redoc|openapi.json)/) && !@property.match(/auth/))].*.responses
    then:
      - field: "401"
        function: defined
      - field: "500"
        function: defined
  
  clarity-schema-descriptions:
    description: Schema properties should have descriptions
    message: "{{property}} should have a description"
    severity: warn
    given: $.components.schemas.*.properties.*
    then:
      field: description
      function: defined
  
  clarity-enum-values:
    description: Enums should define allowed values
    message: "{{property}} should define enum values"
    severity: error
    given: $.components.schemas.*.properties[?(@.enum)]
    then:
      field: enum
      function: length
      functionOptions:
        min: 1