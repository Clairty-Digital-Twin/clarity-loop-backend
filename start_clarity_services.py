#!/usr/bin/env python3\n\"\"\"CLARITY Platform Service Launcher.\n\nLaunches all CLARITY microservices for complete health data processing:\n- Main API (FastAPI)\n- Analysis Service (Pub/Sub subscriber)\n- Insight Service (Gemini AI)\n\nFor production, each service would run in separate containers.\nFor development, this script runs them all locally.\n\"\"\"\n\nimport asyncio\nimport logging\nimport multiprocessing\nimport os\nimport subprocess\nimport sys\nimport time\nfrom pathlib import Path\n\n# Setup logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\nlogger = logging.getLogger(__name__)\n\n# Service configurations\nSERVICES = {\n    \"main_api\": {\n        \"command\": [\n            sys.executable, \"-m\", \"uvicorn\", \n            \"main:app\", \n            \"--host\", \"0.0.0.0\", \n            \"--port\", \"8000\",\n            \"--reload\"\n        ],\n        \"env\": {\"SERVICE_NAME\": \"main_api\"},\n        \"description\": \"Main CLARITY API Server\"\n    },\n    \"analysis_service\": {\n        \"command\": [\n            sys.executable, \"-m\", \"uvicorn\",\n            \"clarity.entrypoints.analysis_service:app\",\n            \"--host\", \"0.0.0.0\",\n            \"--port\", \"8001\",\n            \"--reload\"\n        ],\n        \"env\": {\"SERVICE_NAME\": \"analysis_service\"},\n        \"description\": \"Health Data Analysis Service\"\n    },\n    \"insight_service\": {\n        \"command\": [\n            sys.executable, \"-m\", \"uvicorn\",\n            \"clarity.entrypoints.insight_service:app\",\n            \"--host\", \"0.0.0.0\",\n            \"--port\", \"8002\",\n            \"--reload\"\n        ],\n        \"env\": {\"SERVICE_NAME\": \"insight_service\"},\n        \"description\": \"AI Insight Generation Service\"\n    }\n}\n\n\ndef run_service(service_name: str, config: dict) -> None:\n    \"\"\"Run a single service in a separate process.\"\"\"\n    logger.info(f\"Starting {config['description']}...\")\n    \n    # Set environment variables\n    env = os.environ.copy()\n    env.update(config[\"env\"])\n    \n    try:\n        # Run the service\n        process = subprocess.run(\n            config[\"command\"],\n            env=env,\n            cwd=Path(__file__).parent,\n            check=False\n        )\n        \n        if process.returncode != 0:\n            logger.error(f\"Service {service_name} exited with code {process.returncode}\")\n        \n    except KeyboardInterrupt:\n        logger.info(f\"Service {service_name} stopped by user\")\n    except Exception as e:\n        logger.error(f\"Error running service {service_name}: {e}\")\n\n\ndef check_prerequisites() -> bool:\n    \"\"\"Check if all prerequisites are met.\"\"\"\n    logger.info(\"Checking prerequisites...\")\n    \n    # Check if we're in the right directory\n    if not Path(\"main.py\").exists():\n        logger.error(\"main.py not found. Run this script from the project root.\")\n        return False\n    \n    # Check if src directory exists\n    if not Path(\"src\").exists():\n        logger.error(\"src directory not found.\")\n        return False\n    \n    # Check Python path\n    current_dir = Path.cwd()\n    src_dir = current_dir / \"src\"\n    \n    if str(src_dir) not in sys.path:\n        sys.path.insert(0, str(src_dir))\n        logger.info(f\"Added {src_dir} to Python path\")\n    \n    logger.info(\"✅ Prerequisites check passed\")\n    return True\n\n\ndef show_status() -> None:\n    \"\"\"Show service status and endpoints.\"\"\"\n    print(\"\\n\" + \"=\"*60)\n    print(\"🚀 CLARITY PLATFORM SERVICES STARTED\")\n    print(\"=\"*60)\n    print(\"\\n📍 Service Endpoints:\")\n    print(\"   • Main API:        http://localhost:8000\")\n    print(\"   • API Docs:        http://localhost:8000/docs\")\n    print(\"   • Health Check:    http://localhost:8000/health\")\n    print(\"   • Analysis Service: http://localhost:8001\")\n    print(\"   • Insight Service:  http://localhost:8002\")\n    \n    print(\"\\n🔬 Key Features:\")\n    print(\"   • HealthKit Data Upload & Processing\")\n    print(\"   • Multi-modal Signal Processing (Cardio + Respiratory)\")\n    print(\"   • PAT Model Activity Analysis\")\n    print(\"   • Transformer-based Feature Fusion\")\n    print(\"   • Gemini AI Insight Generation\")\n    print(\"   • Pub/Sub Event-driven Architecture\")\n    \n    print(\"\\n💡 Test Endpoints:\")\n    print(\"   • POST /api/v1/health-data/upload\")\n    print(\"   • GET  /api/v1/health-data/query\")\n    print(\"   • GET  /api/v1/health-data/insights/{user_id}\")\n    \n    print(\"\\n⚡ Environment:\")\n    print(f\"   • Python: {sys.version.split()[0]}\")\n    print(f\"   • Working Dir: {Path.cwd()}\")\n    print(f\"   • Log Level: {os.getenv('LOG_LEVEL', 'INFO')}\")\n    \n    print(\"\\n🛑 To stop all services: Press Ctrl+C\")\n    print(\"=\"*60 + \"\\n\")\n\n\ndef main() -> None:\n    \"\"\"Main entry point for service launcher.\"\"\"\n    logger.info(\"🚀 Starting CLARITY Platform Services...\")\n    \n    # Check prerequisites\n    if not check_prerequisites():\n        sys.exit(1)\n    \n    # Create process pool\n    processes = []\n    \n    try:\n        # Start each service in a separate process\n        for service_name, config in SERVICES.items():\n            process = multiprocessing.Process(\n                target=run_service,\n                args=(service_name, config),\n                name=f\"clarity-{service_name}\"\n            )\n            process.start()\n            processes.append(process)\n            \n            # Give each service time to start\n            time.sleep(2)\n        \n        # Wait a bit for all services to start\n        time.sleep(3)\n        \n        # Show status\n        show_status()\n        \n        # Wait for all processes\n        for process in processes:\n            process.join()\n            \n    except KeyboardInterrupt:\n        logger.info(\"\\n🛑 Shutting down all services...\")\n        \n        # Terminate all processes\n        for process in processes:\n            if process.is_alive():\n                logger.info(f\"Stopping {process.name}...\")\n                process.terminate()\n                process.join(timeout=5)\n                \n                if process.is_alive():\n                    logger.warning(f\"Force killing {process.name}...\")\n                    process.kill()\n        \n        logger.info(\"✅ All services stopped\")\n        \n    except Exception as e:\n        logger.error(f\"Error starting services: {e}\")\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    # Set multiprocessing start method\n    multiprocessing.set_start_method(\"spawn\", force=True)\n    main()\n"