[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "clarity-loop-backend"
version = "0.1.0"
description = "Async-first HealthKit wellness backend with AI-powered health insights"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.11"
authors = [
    { name = "Clarity Team", email = "team@clarityloop.com" },
]
keywords = ["health", "ai", "fastapi", "wellness", "backend"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Typing :: Typed",
]

dependencies = [
    # Core FastAPI and async framework
    "fastapi>=0.115.0,<0.116.0",
    "gunicorn>=22.0.0,<23.0.0",
    "uvicorn[standard]>=0.32.0,<0.35.0",
    "pydantic>=2.9.0,<3.0.0",
    "pydantic-settings>=2.6.0,<3.0.0",

    # AWS SDK
    "boto3>=1.34.0,<2.0.0",
    "botocore>=1.34.0,<2.0.0",
    
    # Google Gemini API (keeping only this)
    "google-generativeai>=0.8.3,<1.0.0",
    
    # JWT for authentication
    "PyJWT[crypto]>=2.10.0,<3.0.0",
    "python-jose[cryptography]>=3.3.0,<4.0.0",
    "cryptography>=44.0.1,<45.0.0",

    # AI/ML Dependencies (PAT Implementation) - major version constraints
    "torch>=2.7.0,<3.0.0",
    "transformers>=4.52.4,<5.0.0",
    "numpy>=1.26.0,<2.0.0",
    "scikit-learn>=1.5.0,<2.0.0",
    "matplotlib>=3.9.0,<4.0.0",
    "seaborn>=0.13.0,<0.14.0",
    "plotly>=5.24.0,<6.0.0",
    "h5py>=3.11.0,<4.0.0",  # Required for PAT model weight loading

    # AI Integration
    "langchain>=0.3.0,<0.4.0",

    # HTTP and networking
    "httpx>=0.27.0,<0.28.0",
    "aiofiles>=24.1.0,<25.0.0",
    "websockets>=13.1,<14.0.0",

    # Database and caching
    "redis[hiredis]>=5.1.0,<6.0.0",
    "asyncpg>=0.29.0,<0.30.0",
    "alembic>=1.13.0,<2.0.0",

    # Security and validation
    "bcrypt>=4.2.0,<5.0.0",
    "python-multipart>=0.0.18,<1.0.0",
    "email-validator>=2.2.0,<3.0.0",

    # Health data processing
    "pandas>=2.2.0,<3.0.0",
    "scipy>=1.14.0,<2.0.0",
    "pytz>=2024.2,<2025.0",
    "python-dateutil>=2.9.0,<3.0.0",

    # Monitoring and observability
    "prometheus-client>=0.21.0,<1.0.0",
    "structlog>=24.4.0,<25.0.0",
    "rich>=13.9.0,<14.0.0",
    "circuitbreaker>=2.0.0,<3.0.0",

    # Configuration and environment
    "python-dotenv>=1.0.0,<2.0.0",
    "click>=8.1.0,<9.0.0",
    "typer>=0.12.0,<1.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing framework
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.0",
    "httpx>=0.27.0",  # for TestClient
    "factory-boy>=3.3.0",
    "faker>=30.0.0",

    # Code quality and linting
    "ruff>=0.6.0",
    "black>=24.8.0",
    "isort>=5.13.0",
    "mypy>=1.11.0",
    "bandit[toml]>=1.7.0",
    "safety>=3.2.0",
    "vulture>=2.11",
    "interrogate>=1.7.0",

    # Type stubs
    "types-python-dateutil>=2.9.0",
    "types-redis>=4.6.0",
    "types-requests>=2.32.0",

    # Development tools
    "ipython>=8.28.0",
    "jupyter>=1.1.0",
    "notebook>=7.2.0",
    "pre-commit>=4.0.0",

    # Documentation
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocstrings[python]>=0.26.0",

    # Performance profiling
    "py-spy>=0.3.0",
    "memory-profiler>=0.61.0",
]

docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocstrings[python]>=0.26.0",
]

test = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.0",
    "httpx>=0.27.0",
    "factory-boy>=3.3.0",
    "faker>=30.0.0",
]

[project.scripts]
clarity-server = "clarity.main:main"
clarity-cli = "clarity.cli:main"

[project.urls]
Homepage = "https://github.com/clarity-loop/clarity-loop-backend"
Documentation = "https://docs.clarityloop.com"
Repository = "https://github.com/clarity-loop/clarity-loop-backend.git"
Issues = "https://github.com/clarity-loop/clarity-loop-backend/issues"

# Hatchling configuration
[tool.hatch.version]
path = "src/clarity/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/clarity"]

[tool.hatch.build]
include = [
    "src/clarity/**/*.py",
    "src/clarity/**/*.typed",
]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/scripts",
    "/config",
]

# Ruff configuration (replaces flake8, isort, and more)
[tool.ruff]
target-version = "py311"
line-length = 88
fix = true

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
    "S104",  # binding to all interfaces in example apps
    "PLR6301",  # test methods could be functions – acceptable in test classes
    "PLR1702",  # nested blocks – accepted for complex websocket handler
    "PLR0912",  # too many branches – accepted for handler endpoints
    "PLR0915",  # too many statements – accepted for handler endpoints
    "PLW0603",  # global statement usage in lifespan for singleton pattern
    "ANN401",   # allow use of Any in some interfaces & tests
    "RUF029",   # allow async def without await in mock helpers
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "FBT", "PLR2004", "S101", "TID252"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "firebase_admin.*",
    "google.cloud.*",
    "tensorflow.*",
    "torch.*",
    "transformers.*",
    "scipy.*",
    "sklearn.*",
    "circuitbreaker.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/clarity",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-v",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "api: API endpoint tests",
    "ml: Machine learning tests",
    "auth: Authentication tests",
    "slow: Slow running tests",
    "requires_gcp: Tests requiring Google Cloud Platform",
    "requires_firebase: Tests requiring Firebase",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/migrations/*",
    "*/scripts/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]
