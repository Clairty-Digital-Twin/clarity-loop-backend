name: Deploy to AWS ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/GitHubActionsDeploy
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      env:
        DOCKER_BUILDKIT: 1
      run: |
        cd ${{ github.workspace }}
        
        # Get ECR registry
        ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
        ECR_REPOSITORY="clarity-backend"
        IMAGE_TAG="${{ github.sha }}"
        
        # Configure buildkit for reduced parallelism to prevent timeouts
        export BUILDKIT_CONFIG=/tmp/buildkit.toml
        cat > $BUILDKIT_CONFIG << EOL
        [worker.oci]
          max-parallelism = 2
        EOL
        
        # Use buildx for efficient caching and multi-platform builds
        echo "üî• Building optimized Docker image for linux/amd64... üî•"
        docker buildx build \
          --platform linux/amd64 \
          --cache-from type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:buildcache \
          --cache-to type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:buildcache,mode=max \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --push \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          .
        
        echo "‚úÖ Image pushed successfully!"
        echo "üè∑Ô∏è Tagged as: $IMAGE_TAG"

    - name: Deploy to ECS
      run: |
        echo "üöÄ Starting automated deployment to ECS..."
        
        # Get current task definition
        TASK_DEF_ARN=$(aws ecs describe-services \
          --cluster clarity-backend-cluster \
          --services clarity-backend-service \
          --query 'services[0].taskDefinition' \
          --output text \
          --region us-east-1)
        
        # Download current task definition
        TASK_DEF=$(aws ecs describe-task-definition \
          --task-definition $TASK_DEF_ARN \
          --query 'taskDefinition' \
          --region us-east-1)
        
        # Update container image
        NEW_TASK_DEF=$(echo $TASK_DEF | \
          jq --arg IMAGE "${{ steps.login-ecr.outputs.registry }}/clarity-backend:${{ github.sha }}" \
          '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
        
        # Save task definition to temp file
        echo "$NEW_TASK_DEF" > /tmp/new-task-def.json
        
        # Register new task definition
        NEW_TASK_ARN=$(aws ecs register-task-definition \
          --cli-input-json file:///tmp/new-task-def.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text \
          --region us-east-1)
        
        # Clean up temp file
        rm -f /tmp/new-task-def.json
        
        echo "üìã New task definition: $NEW_TASK_ARN"
        
        # Update service
        aws ecs update-service \
          --cluster clarity-backend-cluster \
          --service clarity-backend-service \
          --task-definition $NEW_TASK_ARN \
          --force-new-deployment \
          --region us-east-1 \
          --output json > /dev/null
        
        echo "‚è≥ Waiting for deployment to complete..."
        
        # Wait for service to stabilize (timeout after 10 minutes)
        aws ecs wait services-stable \
          --cluster clarity-backend-cluster \
          --services clarity-backend-service \
          --region us-east-1 || true
        
        # Check deployment status
        RUNNING_COUNT=$(aws ecs describe-services \
          --cluster clarity-backend-cluster \
          --services clarity-backend-service \
          --query 'services[0].runningCount' \
          --output text \
          --region us-east-1)
        
        echo "‚úÖ Deployment completed! Running tasks: $RUNNING_COUNT"

    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment health..."
        
        # Get ALB DNS
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names clarity-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text \
          --region us-east-1)
        
        # Check health endpoint
        HEALTH_STATUS=$(curl -s -k https://$ALB_DNS/health | jq -r '.status' || echo "failed")
        
        if [ "$HEALTH_STATUS" = "healthy" ]; then
          echo "‚úÖ DEPLOYMENT VERIFIED - Application is healthy!"
          echo "üéâ Build SHA: ${{ github.sha }}"
          echo "üîó Application URL: https://clarity.novamindnyc.com"
          echo "üõ°Ô∏è Security Status: WAF Protection Active"
        else
          echo "‚ö†Ô∏è Health check returned: $HEALTH_STATUS"
          echo "Note: Application may still be starting up"
        fi