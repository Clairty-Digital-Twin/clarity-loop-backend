version: '3.8'

services:
  # Main application service
  clarity-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
      - FIRESTORE_EMULATOR_HOST=firestore:8080
      - FIREBASE_AUTH_EMULATOR_HOST=firebase-auth:9099
      - PUBSUB_EMULATOR_HOST=pubsub:8085
      - REDIS_URL=redis://redis:6379
    volumes:
      - .:/app
      - /app/.venv
    depends_on:
      - redis
      - firestore
      - firebase-auth
      - pubsub
    networks:
      - clarity-network
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - clarity-network
    restart: unless-stopped

  # Firestore Emulator for development
  firestore:
    image: gcr.io/google.com/cloudsdktool/google-cloud-cli:emulators
    ports:
      - "8080:8080"
      - "4000:4000"
    command: >
      sh -c "gcloud emulators firestore start 
             --host-port=0.0.0.0:8080 
             --rules=/workspace/firestore.rules 
             --project=clarity-dev"
    volumes:
      - ./firestore.rules:/workspace/firestore.rules:ro
      - firestore_data:/workspace/data
    networks:
      - clarity-network
    restart: unless-stopped

  # Firebase Auth Emulator
  firebase-auth:
    image: gcr.io/google.com/cloudsdktool/google-cloud-cli:emulators
    ports:
      - "9099:9099"
    command: >
      sh -c "gcloud emulators auth start 
             --host-port=0.0.0.0:9099 
             --project=clarity-dev"
    networks:
      - clarity-network
    restart: unless-stopped

  # Pub/Sub Emulator for async messaging
  pubsub:
    image: gcr.io/google.com/cloudsdktool/google-cloud-cli:emulators
    ports:
      - "8085:8085"
    command: >
      sh -c "gcloud emulators pubsub start 
             --host-port=0.0.0.0:8085 
             --project=clarity-dev"
    networks:
      - clarity-network
    restart: unless-stopped

  # Prometheus for metrics monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./ops/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - clarity-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./ops/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./ops/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - clarity-network
    restart: unless-stopped

  # Jupyter Notebook for ML experimentation
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    ports:
      - "8888:8888"
    volumes:
      - ./research:/app/research
      - ./data:/app/data
      - jupyter_data:/home/jovyan/.jupyter
    command: >
      sh -c "pip install jupyterlab && 
             jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root 
             --NotebookApp.token='' --NotebookApp.password=''"
    networks:
      - clarity-network
    restart: unless-stopped

# Volumes for persistent data
volumes:
  redis_data:
    driver: local
  firestore_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jupyter_data:
    driver: local

# Network for service communication
networks:
  clarity-network:
    driver: bridge
