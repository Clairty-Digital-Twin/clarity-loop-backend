# Task ID: 36
# Title: Implement Complete Vertical Slice: Apple Watch to AI Insights
# Status: in-progress
# Dependencies: 33, 34, 35, 4, 13, 12, 15, 17
# Priority: high
# Description: Create an end-to-end flow that processes Apple Watch/HealthKit data through the PAT model for actigraphy analysis, generates personalized insights with Gemini AI, and delivers results via real-time WebSocket chat.
# Details:
1. Integrate Apple HealthKit API:
   - Implement OAuth 2.0 for Apple HealthKit authorization
   - Create data fetching service for relevant health metrics (activity, sleep, heart rate)
   - Implement data normalization and preprocessing

2. Connect to PAT (Pretrained Actigraphy Transformer) Model Service:
   - Implement API client for the PAT model service (Task 33)
   - Create data transformation layer to convert HealthKit data to PAT input format
   - Implement error handling and retry mechanisms

3. Integrate Vertex AI Gemini 2.5 Pro Service:
   - Create service client for Gemini AI (Task 34)
   - Develop prompt engineering pipeline to convert PAT analysis and health data into Gemini-ready format
   - Implement response parsing and post-processing

4. Implement Real-time WebSocket Chat Integration:
   - Connect to WebSocket chat interface (Task 35)
   - Develop message routing system to handle user queries
   - Create context management system to maintain conversation state

5. Develop End-to-end Pipeline:
   - Create orchestration service to manage data flow between components
   - Implement caching mechanism for frequent data requests
   - Develop error handling and logging throughout the pipeline

6. Optimize Performance:
   - Implement asynchronous processing where possible
   - Use background tasks for long-running operations
   - Optimize database queries and implement connection pooling

7. Ensure Security and Compliance:
   - Implement end-to-end encryption for data in transit and at rest
   - Ensure HIPAA compliance for data handling and storage
   - Implement audit logging for all data access and transformations

8. Create User Interface for Demo:
   - Develop a simple web interface to showcase the end-to-end flow
   - Implement real-time updates using WebSocket connection
   - Create visualizations for health data and AI insights

9. Implement Comprehensive Logging and Monitoring:
   - Set up distributed tracing across all services
   - Implement performance monitoring and alerting
   - Create dashboards for key metrics and system health

# Test Strategy:
1. Unit Testing:
   - Write unit tests for each component (HealthKit integration, PAT service client, Gemini AI client, WebSocket chat)
   - Use mock objects to simulate dependencies and test edge cases

2. Integration Testing:
   - Develop integration tests for each pair of connected components
   - Create test fixtures with sample health data
   - Verify correct data flow and transformations between services

3. End-to-end Testing:
   - Implement automated end-to-end tests simulating complete user flow
   - Use real Apple Watch data (with user consent) for testing
   - Verify accuracy of PAT analysis and relevance of Gemini AI insights

4. Performance Testing:
   - Conduct load testing to ensure system can handle multiple concurrent users
   - Measure and optimize response times for each step in the pipeline
   - Identify and resolve any bottlenecks

5. Security Testing:
   - Perform penetration testing on the entire system
   - Verify proper encryption of sensitive data
   - Ensure compliance with HIPAA requirements

6. User Acceptance Testing:
   - Conduct beta testing with a small group of users
   - Gather feedback on the accuracy of insights and user experience
   - Iterate based on user feedback

7. Compliance Verification:
   - Review all data handling processes for HIPAA compliance
   - Conduct an internal audit of security measures
   - Prepare documentation for potential regulatory review

8. Monitoring and Logging Verification:
   - Verify that all critical events are properly logged
   - Test alerting mechanisms for various failure scenarios
   - Ensure traceability of requests through the entire system

9. Cross-platform Testing:
   - Test compatibility with different Apple Watch models and iOS versions
   - Verify functionality across various web browsers for the demo interface

10. Regression Testing:
    - Develop a comprehensive regression test suite
    - Automate regression tests to run after each significant change or update

# Subtasks:
## 1. Integrate and Fetch Apple HealthKit Data [in-progress]
### Dependencies: None
### Description: Set up HealthKit integration, request user authorization, and fetch relevant health metrics (activity, sleep, heart rate) from Apple Watch.
### Details:
Enable HealthKit capability, check device support, create a single HKHealthStore instance, request permissions, and implement data fetching for required metrics. Normalize and preprocess the data for downstream use.
<info added on 2025-06-04T14:46:24.444Z>
To implement the HealthKit integration endpoint, first add the HealthKit capability to your Xcode project by selecting your target, navigating to "Signing & Capabilities," clicking the "+ Capability" button, and adding HealthKit. This enables your app to access health data with proper user permissions.

Create a singleton HKHealthStore instance as the entry point to the HealthKit API:

```swift
import HealthKit

class HealthKitManager {
    static let shared = HealthKitManager()
    let healthStore = HKHealthStore()

    private init() {}

    func isHealthKitAvailable() -> Bool {
        return HKHealthStore.isHealthDataAvailable()
    }

    func requestAuthorization(completion: @escaping (Bool, Error?) -> Void) {
        // Define the types of data your app needs to read
        let readTypes: Set<HKObjectType> = [
            HKObjectType.quantityType(forIdentifier: .stepCount)!,
            HKObjectType.quantityType(forIdentifier: .distanceWalkingRunning)!,
            HKObjectType.quantityType(forIdentifier: .heartRate)!
            // Add other required metrics
        ]

        // Request authorization
        healthStore.requestAuthorization(toShare: [], read: readTypes, completion: completion)
    }

    func fetchHealthData(completion: @escaping (Result<[String: Any], Error>) -> Void) {
        // Implementation for fetching required metrics
        // This will collect data from HealthKit and prepare it for the endpoint
    }
}
```

Create a dedicated API endpoint that accepts Apple Watch data from HealthKit, transforms it to your internal format, and connects with the existing PAT service for analysis. Implement data normalization and preprocessing to ensure compatibility with downstream services.
</info added on 2025-06-04T14:46:24.444Z>

## 2. Transform and Analyze Data with PAT Model [pending]
### Dependencies: 36.1
### Description: Convert HealthKit data into the required format and send it to the PAT (Pretrained Actigraphy Transformer) model service for actigraphy analysis.
### Details:
Implement a data transformation layer to map HealthKit data to PAT input schema. Build an API client for the PAT service, handle errors, and process the returned analysis.

## 3. Generate Personalized Insights with Gemini AI [pending]
### Dependencies: 36.2
### Description: Integrate Gemini AI to generate personalized insights from PAT analysis and health data.
### Details:
Create a service client for Gemini AI, design prompt engineering to format PAT output and health data, and implement response parsing and post-processing.

## 4. Implement Real-time WebSocket Chat Delivery [pending]
### Dependencies: 36.3
### Description: Build a real-time chat interface to deliver AI-generated insights to users via WebSocket.
### Details:
Connect to the WebSocket chat interface, implement message routing for user queries and AI responses, and manage conversation context for seamless interaction.

## 5. Develop Demo UI and Orchestrate End-to-End Flow [pending]
### Dependencies: 36.4
### Description: Create a simple web interface to showcase the complete vertical slice and orchestrate the data flow between all components.
### Details:
Develop a demo UI with real-time updates, visualize health data and AI insights, and implement orchestration logic to manage the pipeline from data ingestion to chat delivery.
