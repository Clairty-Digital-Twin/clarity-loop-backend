# CLARITY Digital Twin - AWS Production Docker Image
# Optimized for ECS Fargate deployment with multi-stage build
# CRITICAL: Always build with --platform linux/amd64 for AWS ECS

# Stage 1: Builder
FROM python:3.11-slim AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    gcc \
    python3-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build

# Copy dependency files first for better caching
COPY pyproject.toml LICENSE README.md ./
COPY src/ ./src/

# Install dependencies with increased timeout
ENV PIP_DEFAULT_TIMEOUT=1000
RUN pip install --no-cache-dir --upgrade pip && \
    pip config set global.timeout 1000 && \
    pip install --no-cache-dir --user .

# Stage 2: Runtime
FROM python:3.11-slim

# Install runtime dependencies including AWS CLI
RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    curl \
    unzip \
    && curl -fsSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" \
    && unzip -q awscliv2.zip \
    && ./aws/install \
    && rm -rf awscliv2.zip aws \
    && apt-get remove -y unzip \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r clarity && useradd -r -g clarity -u 1000 clarity

WORKDIR /app

# Copy Python packages from builder
COPY --from=builder --chown=clarity:clarity /root/.local /home/clarity/.local

# Copy application code
COPY --chown=clarity:clarity pyproject.toml LICENSE README.md ./
COPY --chown=clarity:clarity src/ ./src/
COPY --chown=clarity:clarity gunicorn.aws.conf.py ./
COPY --chown=clarity:clarity scripts/download_models.sh scripts/entrypoint.sh ./scripts/

# Create necessary directories
RUN mkdir -p /app/models/pat && \
    chmod +x ./scripts/download_models.sh ./scripts/entrypoint.sh && \
    chown -R clarity:clarity /app

# Update PATH for user-installed packages
ENV PATH=/home/clarity/.local/bin:$PATH

# Switch to non-root user
USER clarity

# Set environment variables for production
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PORT=8000 \
    ENVIRONMENT=production

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Use entrypoint script to download models before starting
ENTRYPOINT ["/app/scripts/entrypoint.sh"]